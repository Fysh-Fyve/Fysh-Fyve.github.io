"use strict";(self.webpackChunk_fysh_fyve_source=self.webpackChunk_fysh_fyve_source||[]).push([[372],{9389:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>h,contentTitle:()=>a,default:()=>o,frontMatter:()=>r,metadata:()=>t,toc:()=>c});var i=s(6070),l=s(1503);const r={sidebar_position:2},a="\ud83d\udc19 Fyshing Manual",t={id:"manual",title:"\ud83d\udc19 Fyshing Manual",description:"\ud83d\udc20 Chapter 1: Fysh Syntax",source:"@site/docs/manual.md",sourceDirName:".",slug:"/manual",permalink:"/docs/manual",draft:!1,unlisted:!1,editUrl:"https://github.com/Fysh-Fyve/fysh/tree/master/pkg/website/docs/manual.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docsSidebar",previous:{title:"\ud83d\udc69\u200d\ud83d\udcbb How to Compile and Run Fysh",permalink:"/docs/installation"}},h={},c=[{value:"\ud83d\udc20 Chapter 1: Fysh Syntax",id:"-chapter-1-fysh-syntax",level:2},{value:"\ud83d\udc1f Variables",id:"-variables",level:3},{value:"\ud83d\udc41\ufe0f Optional Visuals",id:"\ufe0f-optional-visuals",level:3},{value:"\u2795 Arithmetic with Variables",id:"-arithmetic-with-variables",level:3},{value:"\ud83d\udd3c\ud83d\udd3d Increment and Decrement",id:"-increment-and-decrement",level:3},{value:"\ud83c\udf62 Random Number Generation",id:"-random-number-generation",level:3},{value:"\ud83d\udcca Chapter 2: Data Types",id:"-chapter-2-data-types",level:2},{value:"\ud83d\udccf Integers",id:"-integers",level:3},{value:"\ud83d\udcd0 Floating Point Numbers",id:"-floating-point-numbers",level:3},{value:"\ud83d\udcdd Strings",id:"-strings",level:3},{value:"\ud83d\udce6 Arrays and Traversal",id:"-arrays-and-traversal",level:3},{value:"\ud83e\udde0 Chapter 3: Fysh Logic and Operations",id:"-chapter-3-fysh-logic-and-operations",level:2},{value:"\ud83e\udd14 Logical Operations",id:"-logical-operations",level:3},{value:"\ud83d\udd27 Bitwise Operations",id:"-bitwise-operations",level:3},{value:"\ud83d\udc38 Tadpoles",id:"-tadpoles",level:3},{value:"\ud83d\udd04 Chapter 3: Control Structures",id:"-chapter-3-control-structures",level:2},{value:"\ud83d\udd01 While Loops",id:"-while-loops",level:3},{value:"\u2753 Conditional Statements",id:"-conditional-statements",level:3},{value:"\ud83e\uddd1\u200d\ud83d\udd27 Chapter 4: Functions",id:"-chapter-4-functions",level:2},{value:"\u270f\ufe0f Defining Functions",id:"\ufe0f-defining-functions",level:3},{value:"\ud83d\udcde Calling Functions",id:"-calling-functions",level:3},{value:"\u2693 Chapter 5: Output",id:"-chapter-5-output",level:2},{value:"\u26d3\ufe0f Output Value",id:"\ufe0f-output-value",level:3},{value:"\ud83d\udcac Chapter 6: Comments",id:"-chapter-6-comments",level:2},{value:"\ud83d\udd09 Single-line Comments",id:"-single-line-comments",level:3},{value:"\ud83d\udd0a Multi-line Comments",id:"-multi-line-comments",level:3},{value:"\ud83d\udcc8 Examples",id:"-examples",level:2},{value:"\u2757Factorial Example",id:"factorial-example",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"-fyshing-manual",children:"\ud83d\udc19 Fyshing Manual"}),"\n",(0,i.jsx)(n.h2,{id:"-chapter-1-fysh-syntax",children:"\ud83d\udc20 Chapter 1: Fysh Syntax"}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:"Click to expand"}),(0,i.jsx)(n.h3,{id:"-variables",children:"\ud83d\udc1f Variables"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Meet Steven, our fishy friend. In Fysh, variables like Steven are declared\nwith ",(0,i.jsx)(n.code,{children:"><name>"}),". Every line of fysh ends with a wave ",(0,i.jsx)(n.code,{children:"~"}),"."]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fysh",children:"><Steven> ~\n"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Steven has binary scales. In Fysh, ",(0,i.jsx)(n.code,{children:"}"})," represents ",(0,i.jsx)(n.code,{children:"1"})," and ",(0,i.jsx)(n.code,{children:")"})," represents ",(0,i.jsx)(n.code,{children:"0"}),".\nHere, Steven is valued at ",(0,i.jsx)(n.code,{children:"0b101"}),", which is ",(0,i.jsx)(n.code,{children:"5"})," in decimal."]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fysh",children:"><steven> = ><})}> ~\n"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Steven doesn\u2019t give a flying fysh about scale direction. ",(0,i.jsx)(n.code,{children:"\u2248"})," for variable\nassignment is cool with them too."]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fysh",children:"><steven> \u2248 ><}({> ~\n"})}),(0,i.jsx)(n.h3,{id:"\ufe0f-optional-visuals",children:"\ud83d\udc41\ufe0f Optional Visuals"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Steven is blind. You have the power to bless them with sight, but it's\ncompletely optional! You can make them biblically accurate by giving them\nmultiple eyes."}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fysh",children:"><steven> \u2248 ><{({\xb0> ~\n><steven> \u2248 ><{({o> ~\n><steven> \u2248 ><{({\xb0\xb0> ~\n><steven> \u2248 ><{({o\xb0> ~\n><steven> = ><{({\xb0o\xb0> ~\n"})}),(0,i.jsx)(n.h3,{id:"-arithmetic-with-variables",children:"\u2795 Arithmetic with Variables"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Summing values:"})," A school of Fysh's value is the sum of each member. This\ngives Steven a value of ",(0,i.jsx)(n.code,{children:"0b101 = 0b100 + 0b001 ="})," (5 = 4 + 1)."]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fysh",children:"><steven> \u2248 ><{((\xb0> ><(({\xb0> ~\n"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Subtracting values:"})," Sometimes fysh are negative and start to swim\nbackwards. This takes away from the school's value. Steven's value is\n",(0,i.jsx)(n.code,{children:"0b101 = 0b111 - 0b010"})," (5 = 7 - 2)."]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fysh",children:"><steven> \u2248 ><{{{\xb0> <\xb0)})>< ~  # 0b101 = 0b111 - 0b010\n"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Multiplying values:"})," Fysh often get lonely. This loneliness causes fysh to\nmeet new fysh and proliferate. This gives Steven a value of\n",(0,i.jsx)(n.code,{children:"0b101010 = 0b110 * 0b111"}),". (42 = 6 * 7)"]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fysh",children:"><steven> = ><{{(\xb0> <3 ><{{{\xb0> ~\n><steven> \u2248 ><{{(\xb0> \u2661 ><{{{\xb0> ~\n"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Dividing values:"})," Not every fysh story is a happy one. At times, separation\nis inevitable, and their division breaks their heart. This gives Steven a\nvalue of ",(0,i.jsx)(n.code,{children:"0b101 = 0b11001 / 0b101"}),". (5 = 25 / 5)"]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fysh",children:"><steven> \u2248 ><{{(({\xb0> </3 ><{({\xb0> ~\n><steven> \u2248 ><{{(({\xb0> \ud83d\udc94 ><{({\xb0> ~\n"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Using parentheses for complex operations:"})," Fysh are often abducted and\nisolated into fyshbowls ",(0,i.jsx)(n.code,{children:"( )"})," for terrestrials' amusment. This makes the fysh\nsad and gives Steven a value of ",(0,i.jsx)(n.code,{children:"0b101 = 0b101 / (0b101 - 0b100)"}),". (5 = 5 /\n(5 - 4))"]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fysh",children:"><steven> \u2248 ><{({\xb0> \ud83d\udc94 ( ><{({\xb0> <\xb0}))>< ) ~\n"})}),(0,i.jsx)(n.h3,{id:"-increment-and-decrement",children:"\ud83d\udd3c\ud83d\udd3d Increment and Decrement"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Increment:"})," As life goes on, we learn from our mistakes and improve.\nSteven\u2019s self help journey allowed them to grow an extra tail, incrementing\ntheir value by 1."]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fysh",children:">><steven> ~\n"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Decrement:"})," Sometimes we feel like a fyshup, a failure. And that's ok, it\u2019s\na part of being fysh. However for some fysh, this feeling is too much to\nhandle and is internalized. They haven\u2019t received the emotional support they\nneed and have gone on a downward spiral, causing them to feel worthless. They\nbegin to retreat and try to swim away in the opposite direction causing their\nvalue to decrement by 1."]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fysh",children:"<steven><< ~\n"})}),(0,i.jsx)(n.h3,{id:"-random-number-generation",children:"\ud83c\udf62 Random Number Generation"}),(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Random Number:"})," This is a grilled fysh. It generates a random signed 32-bit\nnumber that determines the doneness of the fysh."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fysh",children:"><###> ~\n"})})]}),"\n",(0,i.jsx)(n.h2,{id:"-chapter-2-data-types",children:"\ud83d\udcca Chapter 2: Data Types"}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:"Click to expand"}),(0,i.jsx)(n.h3,{id:"-integers",children:"\ud83d\udccf Integers"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Integer:"})," Steven is an integer represented using binary scales. They have\nscales that are either ",(0,i.jsx)(n.code,{children:"1"})," or ",(0,i.jsx)(n.code,{children:"0"}),". Steven's value is ",(0,i.jsx)(n.code,{children:"0b101"}),", which is ",(0,i.jsx)(n.code,{children:"5"})," in\ndecimal."]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fysh",children:"><steven> \u2248 ><{({\xb0> ~\n"})}),(0,i.jsx)(n.h3,{id:"-floating-point-numbers",children:"\ud83d\udcd0 Floating Point Numbers"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Floats:"})," Steven can also be a float fysh. To seperate the integer and\ndecimal parts, we use a fysh bone ",(0,i.jsx)(n.code,{children:"-"}),". Steven's value is ",(0,i.jsx)(n.code,{children:"5.5"}),"."]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fysh",children:"><steven> \u2248 ><{({-{({\xb0> ~\n"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Floats with multiple bones:"})," Steven can also have multiple bones to\nseperate each decimal place. Steven's value is ",(0,i.jsx)(n.code,{children:"5 + 0.2 + 0.05 = 5.25"}),"."]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fysh",children:"><steven> \u2248 ><{({-{(-{({\xb0> ~\n"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Floats with numbers larger than 9:"})," If a value in the decimal place is\ngreater than 9, it will occupy an extra decimal place. Steven's value is\n",(0,i.jsx)(n.code,{children:"15 + 0.15 + 0.005 15.155"}),"."]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fysh",children:"><steven> \u2248 ><{{{{-{{{{-{({\xb0> ~\n"})}),(0,i.jsx)(n.h3,{id:"-strings",children:"\ud83d\udcdd Strings"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Strings:"})," Steven can also be a string fysh. They speak using bubbles.\nSteven's value is ",(0,i.jsx)(n.code,{children:'"Hello, World!"'}),"."]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fysh",children:"><steven> \u2248 \ud83e\udee7Hello, World!\ud83e\udee7 ~\n"})}),(0,i.jsx)(n.h3,{id:"-arrays-and-traversal",children:"\ud83d\udce6 Arrays and Traversal"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Arrays:"})," A fysh tank ",(0,i.jsx)(n.code,{children:"[ ]"})," is used create an array. Each item is separated\nby fysh food -.value is ",(0,i.jsx)(n.code,{children:"[0b010, 0b010] = [2, 2]"}),"."]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fysh",children:"><steven> \u2248 [><({(\xb0> - ><({(\xb0>] ~\n"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Accessing Array Elements:"})," These fysh tanks can be traversed using a fysh\ntank ",(0,i.jsx)(n.code,{children:"[ ]"})," with a number inside it. Steven returns the element at index 1.\nArray indexes start at 0."]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fysh",children:"><steven>[><(({\xb0>] ~\n"})})]}),"\n",(0,i.jsx)(n.h2,{id:"-chapter-3-fysh-logic-and-operations",children:"\ud83e\udde0 Chapter 3: Fysh Logic and Operations"}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:"Click to expand"}),(0,i.jsx)(n.h3,{id:"-logical-operations",children:"\ud83e\udd14 Logical Operations"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:"AND (&&)"}),", ",(0,i.jsx)(n.code,{children:"OR (||)"}),", and ",(0,i.jsx)(n.code,{children:"NOT (!!)"})]}),": Steven is experiencing an\nexistential crisis. They're questioning the very fabric of reality.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["If steven is real ",(0,i.jsx)(n.code,{children:"and"})," they found the truth, they're happy. (Steven &&\ntheTruth)"]}),"\n",(0,i.jsxs)(n.li,{children:["Steven is happy if either they're real ",(0,i.jsx)(n.code,{children:"or"})," found the truth. (Steven ||\ntheTruth)"]}),"\n",(0,i.jsxs)(n.li,{children:["But then Steven thought about it and said \"hey it would be kinda cool if I\nwasn't real\" and is now only happy if they're ",(0,i.jsx)(n.code,{children:"not"})," real. (!!Steven)"]}),"\n"]}),"\n"]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fysh",children:"><steven> && ><TheTruth> ~\n><steven> || ><TheTruth> ~\n!! ><steven> ~\n"})}),(0,i.jsx)(n.h3,{id:"-bitwise-operations",children:"\ud83d\udd27 Bitwise Operations"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Steven is bored and looking to have their bits rearranged. At Fysh, we're\nhereto help! We have provided Steven with a variety of tools and bitwise\nmanipulations to satisfy their bit busting needs:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"AND (&)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"OR (|)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"XOR (^)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"NOT (!)"})}),"\n"]}),"\n"]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fysh",children:"><steven> & ><(({\xb0> ~\n><steven> | ><(({\xb0> ~\n><steven> ^ ><(({\xb0> ~\n! ><steven> ~\n"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Logical shifts:"})," Steven can also use logical shifts! Steven shifts their\nbits to the left then right by 1.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.strong,{children:["Left shift (",(0,i.jsx)(n.code,{children:"<<"}),"):"]})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.strong,{children:["Right shift (",(0,i.jsx)(n.code,{children:">>"}),"):"]})}),"\n"]}),"\n"]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fysh",children:"><steven> << ><(({\xb0> ~\n><steven> >> ><(({\xb0> ~\n"})}),(0,i.jsx)(n.h3,{id:"-tadpoles",children:"\ud83d\udc38 Tadpoles"}),(0,i.jsxs)(n.p,{children:["Tadpoles are Fysh too. They swim towards bigger Fysh (they like the danger) and\nare represented by ",(0,i.jsx)(n.code,{children:"~o"})," or ",(0,i.jsx)(n.code,{children:"o~"}),". Here, we are checking if Steven is bigger than\n5 and less than 7, respectively."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fysh",children:"><//> Greater/Less than\n><steven> o~ ><{({\xb0>\n><steven> ~o ><{{{\xb0>\n\n><//> Greater/Less than or equal to (replace ~ with \u2248 or =)\n><steven> o= ><{({\xb0>\n><steven> \u2248o ><{{{\xb0>\n"})})]}),"\n",(0,i.jsx)(n.h2,{id:"-chapter-3-control-structures",children:"\ud83d\udd04 Chapter 3: Control Structures"}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:"Click to expand"}),(0,i.jsx)(n.h3,{id:"-while-loops",children:"\ud83d\udd01 While Loops"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["In the whirlpool of Fysh logic, the while loop, represented by ",(0,i.jsx)(n.code,{children:"@"})," or ",(0,i.jsx)(n.code,{children:"\ud83c\udf00"}),",\nwith the condition stored in either ",(0,i.jsx)(n.code,{children:"[ ]"})," or ",(0,i.jsx)(n.code,{children:"( )"}),". Small fysh define the\niterative heart ",(0,i.jsx)(n.code,{children:"><>"})," and ",(0,i.jsx)(n.code,{children:"<><"}),"."]}),"\n"]}),(0,i.jsx)(n.p,{children:"Here we repeat the loop while Steve is greater than 5. Steven decrements by 1\neach iteration."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fysh",children:"\ud83c\udf00 [><steven> o~ ><{((\xb0>]\n><>\n    <steven><< ~\n<><\n\n@ (><steven> o~ ><{((\xb0>)\n><>\n    <steven><< ~\n<><\n"})}),(0,i.jsx)(n.h3,{id:"-conditional-statements",children:"\u2753 Conditional Statements"}),(0,i.jsx)(n.p,{children:"Conditional statements run based on how each Fysh feels"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:"if"})," statement:"]})," are happy since they're the condition you're looking for.\nThey feel wanted and loved. They are represented by a happy Fysh"]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fysh",children:"><(((^> [><steven> o~ ><{((\xb0>]\n><>\n    <steven><< ~\n<><\n"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:"else"})," statement:"]})," feel like they're the last resort, an afterthought. This\nmakes them feel unimportant and sad. They are represented by a dead Fysh"]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fysh",children:"><(((*>\n><>\n    ><steven> \u2248 ><(((\xb0> ~\n<><\n"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:"else if"})," statement:"]})," are the middle child. They're not the first choice,\nbut they're not the last either. They're represented by both a dead and happy\nFysh"]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fysh",children:"><(((*> ><(((^> [><steven> ~o ><{((\xb0>]\n><>\n    >><steven> ~\n<><\n"})})]}),"\n",(0,i.jsx)(n.h2,{id:"-chapter-4-functions",children:"\ud83e\uddd1\u200d\ud83d\udd27 Chapter 4: Functions"}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:"Click to expand"}),(0,i.jsx)(n.h3,{id:"\ufe0f-defining-functions",children:"\u270f\ufe0f Defining Functions"}),(0,i.jsxs)(n.p,{children:["To define a function or SUBroutine, use a submarine ",(0,i.jsx)(n.code,{children:">(funcNameHere)"})," along with\nany parameters ",(0,i.jsx)(n.code,{children:"><param>"}),". To return a value, use a squid ",(0,i.jsx)(n.code,{children:"<~"})," or ",(0,i.jsx)(n.code,{children:"\ud83e\udd91"}),"."]}),(0,i.jsxs)(n.p,{children:["Here the function is called ",(0,i.jsx)(n.code,{children:"submarine"})," and has 3 parameters. It returns the sum\nof the 3 parameters."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fysh",children:">(submarine) ><param1> ><param2> ><param3>\n><>\n    <~ ><param1> ><param2> ><param3> ~\n<><\n"})}),(0,i.jsx)(n.h3,{id:"-calling-functions",children:"\ud83d\udcde Calling Functions"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["To call a subroutine, put the submarine in a Fysh tank along with its\narguments. If two or more params are next to each other, separate them with\nFysh food ",(0,i.jsx)(n.code,{children:"-"}),"."]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fysh",children:"[>(submarine) ><fysh1> - ><fysh2> - ><fysh3>] ~\n"})})]}),"\n",(0,i.jsx)(n.h2,{id:"-chapter-5-output",children:"\u2693 Chapter 5: Output"}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:"Click to expand"}),(0,i.jsx)(n.h3,{id:"\ufe0f-output-value",children:"\u26d3\ufe0f Output Value"}),(0,i.jsxs)(n.p,{children:["When we finally reach our destination, we anchor ourselves. Anchors are used to\noutput the value of a Fysh. They are represented by ",(0,i.jsx)(n.code,{children:"(+o"})," or ",(0,i.jsx)(n.code,{children:"\u2693"})]}),(0,i.jsxs)(n.p,{children:["Here we're outputting ",(0,i.jsx)(n.code,{children:"0b101"})," (5)."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fysh",children:"(+o ><{({\xb0> ~\n"})})]}),"\n",(0,i.jsx)(n.h2,{id:"-chapter-6-comments",children:"\ud83d\udcac Chapter 6: Comments"}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:"Click to expand"}),(0,i.jsx)(n.h3,{id:"-single-line-comments",children:"\ud83d\udd09 Single-line Comments"}),(0,i.jsxs)(n.p,{children:["Navigator Fysh are used to guide the reader through the code. They are\nrepresented by ",(0,i.jsx)(n.code,{children:"><//>"}),"."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fysh",children:"><//> What's cookin' good lookin'?\n"})}),(0,i.jsx)(n.h3,{id:"-multi-line-comments",children:"\ud83d\udd0a Multi-line Comments"}),(0,i.jsxs)(n.p,{children:["For longer explanations, multiline comments are used. They are represented by\n",(0,i.jsx)(n.code,{children:"></*>"})," and ",(0,i.jsx)(n.code,{children:"<*\\><"})]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fysh",children:"></*>\nHow to grill a Fysh:\n1. Catch a Fysh\n2. Grill the Fysh\n3. Eat the Fysh\n<*/><\n"})})]}),"\n",(0,i.jsx)(n.h2,{id:"-examples",children:"\ud83d\udcc8 Examples"}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:"Click to expand"}),(0,i.jsx)(n.h3,{id:"factorial-example",children:"\u2757Factorial Example"}),(0,i.jsx)(n.p,{children:"This program calculates the factorial of number. In this case 5. The factorial\nof 5 is 120."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fysh",children:"><//> Factorial Example\n\n><number>    \u2248 ><{({\xb0> ~\n><factorial> \u2248 ><(({\xb0> ~\n\n\ud83c\udf00 [><number> o~ ><(({\xb0>]\n><>\n    ><factorial> \u2248 ><factorial> \u2661 ><number> ~\n    <number><< ~\n<><\n(+o ><factorial> ~\n"})}),(0,i.jsx)(n.p,{children:"Let's break it down:"}),(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"><number> \u2248 ><{({\xb0> ~"})," - Declare the number to calculate the factorial of.\n(5 in this case)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"><factorial> \u2248 ><(({\xb0> ~"})," - Declare the factorial variable. (1 in this case)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"\ud83c\udf00 [><number> o~ ><(({\xb0>]"})," - While the number is greater than 1, do the\nfollowing:","\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"><factorial> \u2248 ><factorial> \u2661 ><number> ~"})," - Multiply the factorial by\nthe number."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"<number><< ~"})," - Decrement the number."]}),"\n",(0,i.jsx)(n.li,{children:"Repeat until the number is 1."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"(+o ><factorial> ~"})," - Output the factorial."]}),"\n"]})]})]})}function o(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1503:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>t});var i=s(758);const l={},r=i.createContext(l);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);